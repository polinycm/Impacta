// <auto-generated />
using System;
using EPT.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EPT.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EPT.Models.Acervo", b =>
                {
                    b.Property<int>("AcervoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AtestadoId")
                        .HasColumnType("int");

                    b.Property<int>("FuncoesId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProfissionaisId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dt_fim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("dt_inicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("numero_acervo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("numero_ept")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AcervoId");

                    b.HasIndex("AtestadoId");

                    b.HasIndex("FuncoesId");

                    b.HasIndex("ProfissionaisId");

                    b.ToTable("Acervo");
                });

            modelBuilder.Entity("EPT.Models.Atestado", b =>
                {
                    b.Property<int>("AtestadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContratanteId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("descricao")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("dt_fim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("dt_inicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("moeda")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("n_atestado")
                        .HasColumnType("longtext");

                    b.Property<string>("objeto")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<string>("valor")
                        .HasColumnType("longtext");

                    b.HasKey("AtestadoId");

                    b.HasIndex("ContratanteId");

                    b.ToTable("Atestado");
                });

            modelBuilder.Entity("EPT.Models.AtestadoItem", b =>
                {
                    b.Property<int>("AtestadoItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AtestadoId")
                        .HasColumnType("int");

                    b.Property<string>("Item")
                        .HasColumnType("longtext");

                    b.Property<int>("ItensId")
                        .HasColumnType("int");

                    b.Property<int>("SubItensId")
                        .HasColumnType("int");

                    b.Property<string>("quantidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("unidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AtestadoItemId");

                    b.HasIndex("AtestadoId");

                    b.HasIndex("ItensId");

                    b.HasIndex("SubItensId");

                    b.ToTable("AtestadoItem");
                });

            modelBuilder.Entity("EPT.Models.Contratante", b =>
                {
                    b.Property<int>("ContratanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("contratante")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ContratanteId");

                    b.ToTable("Contratante");
                });

            modelBuilder.Entity("EPT.Models.Funcoes", b =>
                {
                    b.Property<int>("FuncoesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FuncoesId");

                    b.ToTable("Funcoes");
                });

            modelBuilder.Entity("EPT.Models.Itens", b =>
                {
                    b.Property<int>("ItensId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ItensId");

                    b.ToTable("Itens");
                });

            modelBuilder.Entity("EPT.Models.Profissionais", b =>
                {
                    b.Property<int>("ProfissionaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProfissionaisId");

                    b.ToTable("Profissionais");
                });

            modelBuilder.Entity("EPT.Models.SubItens", b =>
                {
                    b.Property<int>("SubItensId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ItensId")
                        .HasColumnType("int");

                    b.Property<string>("SubItem")
                        .HasColumnType("longtext");

                    b.HasKey("SubItensId");

                    b.HasIndex("ItensId");

                    b.ToTable("SubItens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EPT.Models.Acervo", b =>
                {
                    b.HasOne("EPT.Models.Atestado", "Atestado")
                        .WithMany("Acervos")
                        .HasForeignKey("AtestadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPT.Models.Funcoes", "Funcoes")
                        .WithMany("Acervos")
                        .HasForeignKey("FuncoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPT.Models.Profissionais", "Profissionais")
                        .WithMany("Acervos")
                        .HasForeignKey("ProfissionaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atestado");

                    b.Navigation("Funcoes");

                    b.Navigation("Profissionais");
                });

            modelBuilder.Entity("EPT.Models.Atestado", b =>
                {
                    b.HasOne("EPT.Models.Contratante", "Contratante")
                        .WithMany("Atestado")
                        .HasForeignKey("ContratanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contratante");
                });

            modelBuilder.Entity("EPT.Models.AtestadoItem", b =>
                {
                    b.HasOne("EPT.Models.Atestado", "Atestado")
                        .WithMany("AtestadoItems")
                        .HasForeignKey("AtestadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPT.Models.Itens", "Itens")
                        .WithMany("AtestadoItems")
                        .HasForeignKey("ItensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPT.Models.SubItens", "SubItens")
                        .WithMany("AtestadoItem")
                        .HasForeignKey("SubItensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atestado");

                    b.Navigation("Itens");

                    b.Navigation("SubItens");
                });

            modelBuilder.Entity("EPT.Models.SubItens", b =>
                {
                    b.HasOne("EPT.Models.Itens", "Itens")
                        .WithMany("SubItens")
                        .HasForeignKey("ItensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPT.Models.Atestado", b =>
                {
                    b.Navigation("Acervos");

                    b.Navigation("AtestadoItems");
                });

            modelBuilder.Entity("EPT.Models.Contratante", b =>
                {
                    b.Navigation("Atestado");
                });

            modelBuilder.Entity("EPT.Models.Funcoes", b =>
                {
                    b.Navigation("Acervos");
                });

            modelBuilder.Entity("EPT.Models.Itens", b =>
                {
                    b.Navigation("AtestadoItems");

                    b.Navigation("SubItens");
                });

            modelBuilder.Entity("EPT.Models.Profissionais", b =>
                {
                    b.Navigation("Acervos");
                });

            modelBuilder.Entity("EPT.Models.SubItens", b =>
                {
                    b.Navigation("AtestadoItem");
                });
#pragma warning restore 612, 618
        }
    }
}
